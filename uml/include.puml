@startuml
class Program {
    + {static} Main(args:string[]) : void
}
class Officina {
    - data : string = ""
    - {static} <<readonly>> url_n : string = "https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-andamento-nazionale-latest.json"
    - {static} <<readonly>> url_r : string = "https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-regioni-latest.json"
    - {static} <<readonly>> path_n : string = "dati-raw-json/andamento_nazionale.json"
    - {static} <<readonly>> path_r : string = "dati-raw-json/regioni_latest.json"
    + Officina()
    + StampaDati(lb:Label, i:int) : void
    + Aggiorna(lbItalia:Label, lbInfo2:Label) : void
}
class "List`1"<T> {
}
Officina --> "LP" LoadProxy
Officina --> "regione" Liste
Officina --> "attributi<Liste>" "List`1"
Officina --> "DN" DatiProxy
Officina --> "DR" DatiProxy
class CheckDataDownload {
    - data : string
    - b : bool
    + CheckDataDownload(path:string)
    + GetB() : bool
}
CheckDataDownload --> "today" DateTime
interface ILoad {
    CaricaDati(lb:Label, l:Liste) : void
}
class DatiProxy {
    - _url : string
    - _path : string
    + DatiProxy(url:string, path:string)
    - GetDati() : Dati
    + DownloadDati() : JArray
}
IDati <|-- DatiProxy
DatiProxy --> "_dati" Dati
DatiProxy --> "check" CheckDataDownload
interface IDati {
    DownloadDati() : JArray
}
class Dati {
    - _url : string
    - _path : string
    - flag : bool
    <<internal>> Dati(url:string, path:string, b:bool)
    + DownloadDati() : JArray
    - ParseDati() : JArray
}
IDati <|-- Dati
class Load {
    - _b : bool = false
    + Load(b:bool)
    + CaricaDati(lb:Label, l:Liste) : void
}
ILoad <|-- Load
class LoadProxy {
    - b : bool
    + LoadProxy(lb:Label, l:Liste)
    - GetLoad(_b:bool) : Load
    + CaricaDati(lb:Label, l:Liste) : void
}
ILoad <|-- LoadProxy
LoadProxy --> "loader" Load
class Product {
    <<internal>> _name : string
    + Add(s:string, part:string) : void
    + GetData() : string
    + GetPart(p:Product) : string
    + GetParts() : Dictionary<string, string>
}
class "Dictionary`2"<T1,T2> {
}
Product o-> "parts<string,string>" "Dictionary`2"
class Liste {
    + dati : string <<get>> <<set>>
    + Liste(name:string)
    + Order() : void
}
class "Dictionary`2"<T1,T2> {
}
Product <|-- Liste
Liste o-> "dictionary<string,string>" "Dictionary`2"
class Director {
    + AndamentoNazionale(s:JObject) : void
    + Regione(s:JObject) : void
}
Director --> "builder" IBuilder
Director --> "Builder" IBuilder
class ConcreteBuilder {
    + ConcreteBuilder()
    - Reset() : void
    + data(item:JObject) : void
    + stato(item:JObject) : void
    + codice_regione(item:JObject) : void
    + denominazione_regione(item:JObject) : void
    + codice_provincia(item:JObject) : void
    + denominazione_provincia(item:JObject) : void
    + sigla_provincia(item:JObject) : void
    + latitutine(item:JObject) : void
    + longitudine(item:JObject) : void
    + ricoverati_con_sintomi(item:JObject) : void
    + terapia_intensiva(item:JObject) : void
    + totale_ospedalizzati(item:JObject) : void
    + isolamento_domiciliare(item:JObject) : void
    + totale_positivi(item:JObject) : void
    + variazione_totale_positivi(item:JObject) : void
    + nuovi_positivi(item:JObject) : void
    + dimessi_guariti(item:JObject) : void
    + deceduti(item:JObject) : void
    + totale_casi(item:JObject) : void
    + tamponi(item:JObject) : void
    + casi_testati(item:JObject) : void
    + note_it(item:JObject) : void
    + note_en(item:JObject) : void
    + GetProduct() : Product
}
IBuilder <|-- ConcreteBuilder
ConcreteBuilder --> "product" Product
interface IBuilder {
    data(s:JObject) : void
    stato(s:JObject) : void
    codice_regione(s:JObject) : void
    denominazione_regione(s:JObject) : void
    codice_provincia(s:JObject) : void
    denominazione_provincia(s:JObject) : void
    sigla_provincia(s:JObject) : void
    latitutine(s:JObject) : void
    longitudine(s:JObject) : void
    ricoverati_con_sintomi(s:JObject) : void
    terapia_intensiva(s:JObject) : void
    totale_ospedalizzati(s:JObject) : void
    isolamento_domiciliare(s:JObject) : void
    totale_positivi(s:JObject) : void
    variazione_totale_positivi(s:JObject) : void
    nuovi_positivi(s:JObject) : void
    dimessi_guariti(s:JObject) : void
    deceduti(s:JObject) : void
    totale_casi(s:JObject) : void
    tamponi(s:JObject) : void
    casi_testati(s:JObject) : void
    note_it(s:JObject) : void
    note_en(s:JObject) : void
}
class MainWindow {
    - <<readonly>> info : string = "\nnuovi dati ogni giorno\n dopo le 17:00"
    + MainWindow()
    - MainWindow(builder:Builder)
    - Window_DeleteEvent(sender:object, a:DeleteEventArgs) : void
    - Button1_Clicked(sender:object, a:EventArgs) : void
    - Button2_Clicked(sender:object, a:EventArgs) : void
    - Button3_Clicked(sender:object, a:EventArgs) : void
}
Window <|-- MainWindow
MainWindow o-> "lbInfo1" Label
MainWindow o-> "lbItalia" Label
MainWindow o-> "lbRegioni" Label
MainWindow o-> "lbInfo2" Label
MainWindow o-> "_button1" Button
MainWindow o-> "_button2" Button
MainWindow o-> "_button3" Button
MainWindow --> "dch" DisplayChoice
interface DisplayState {
    Next(dch:DisplayChoice, lbRegioni:Label, lbInfo2:Label) : void
    UpdateState(dch:DisplayChoice, lbRegioni:Label, lbInfo2:Label) : void
    Previous(dch:DisplayChoice, lbRegioni:Label, lbInfo2:Label) : void
}
class Guariti {
    + Guariti(O:Officina, lbRegioni:Label, lbInfo2:Label)
    + Next(dch:DisplayChoice, lbRegioni:Label, lbInfo2:Label) : void
    + UpdateState(dch:DisplayChoice, lbRegioni:Label, lbInfo2:Label) : void
    + Previous(dch:DisplayChoice, lbRegioni:Label, lbInfo2:Label) : void
}
DisplayState <|-- Guariti
Guariti --> "_O" Officina
class TotaleCasi {
    + TotaleCasi(O:Officina, lbRegioni:Label, lbInfo2:Label)
    + Next(dch:DisplayChoice, lbRegioni:Label, lbInfo2:Label) : void
    + UpdateState(dch:DisplayChoice, lbRegioni:Label, lbInfo2:Label) : void
    + Previous(dch:DisplayChoice, lbRegioni:Label, lbInfo2:Label) : void
}
DisplayState <|-- TotaleCasi
TotaleCasi --> "_O" Officina
class DisplayChoice {
    + DisplayChoice(lbItalia:Label, lbRegioni:Label, lbInfo2:Label)
    + Next(lbRegioni:Label, lbInfo2:Label) : void
    + Update(lbItalia:Label, lbRegioni:Label, lbInfo2:Label) : void
    + Previous(lbRegioni:Label, lbInfo2:Label) : void
}
DisplayChoice --> "O" Officina
DisplayChoice --> "CurrentState" DisplayState
class VarPositivi {
    + VarPositivi(O:Officina, lbRegioni:Label, lbInfo2:Label)
    + Next(dch:DisplayChoice, lbRegioni:Label, lbInfo2:Label) : void
    + UpdateState(dch:DisplayChoice, lbRegioni:Label, lbInfo2:Label) : void
    + Previous(dch:DisplayChoice, lbRegioni:Label, lbInfo2:Label) : void
}
DisplayState <|-- VarPositivi
VarPositivi --> "_O" Officina
class Deceduti {
    + Deceduti(O:Officina, lbRegioni:Label, lbInfo2:Label)
    + Next(dch:DisplayChoice, lbRegioni:Label, lbInfo2:Label) : void
    + UpdateState(dch:DisplayChoice, lbRegioni:Label, lbInfo2:Label) : void
    + Previous(dch:DisplayChoice, lbRegioni:Label, lbInfo2:Label) : void
}
DisplayState <|-- Deceduti
Deceduti --> "_O" Officina
class Positivi {
    + Positivi(O:Officina, lbRegioni:Label, lbInfo2:Label)
    + Next(dch:DisplayChoice, lbRegioni:Label, lbInfo2:Label) : void
    + UpdateState(dch:DisplayChoice, lbRegioni:Label, lbInfo2:Label) : void
    + Previous(dch:DisplayChoice, lbRegioni:Label, lbInfo2:Label) : void
}
DisplayState <|-- Positivi
Positivi --> "_O" Officina
@enduml
